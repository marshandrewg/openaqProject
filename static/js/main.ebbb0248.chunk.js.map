{"version":3,"sources":["logo.svg","MeasurementForm.js","SelectCityForm.js","ExampleNavBar.js","ExampleToast.js","MeasurementTable.js","App.js","reportWebVitals.js","index.js"],"names":["renderTooltip","props","Tooltip","id","MeasurementForm","Form","onSubmit","event","preventDefault","handleSubmit","Row","Col","Group","controlId","Label","Control","size","type","placeholder","OverlayTrigger","placement","delay","show","hide","overlay","Button","variant","SelectCityForm","as","onChange","handleChange","options","ExampleNavBar","ExampleToast","children","useState","toggleShow","Jumbotron","onClick","Toast","onClose","Header","className","Body","MeasurementTable","Table","striped","bordered","hover","rows","App","data","setData","useEffect","a","axios","result","results","setCitySelected","name","console","log","citySelected","fetchData","measurements","setMeasurements","fetchCitySelected","userMeasurement","setUserMeasurement","JSON","stringify","method","headers","url","city","push","fetchUserMeasurement","Container","Badge","role","aria-label","map","value","target","measurement","location","parameter","unit","Date","date","currentTarget","checkValidity","stopPropagation","submitUserMeasurement","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebbb0248.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Tooltip from 'react-bootstrap/Tooltip'\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\n\n\n// <Form>\n//   <Row>\n//     <Col>\n//       <Form.Control placeholder=\"First name\" />\n//     </Col>\n//     <Col>\n//       <Form.Control placeholder=\"Last name\" />\n//     </Col>\n//   </Row>\n// </Form>\n\nconst renderTooltip = (props) => (\n    <Tooltip id=\"button-tooltip\" {...props}>\n      Press to Submit new Measurement\n    </Tooltip>\n  );\n\nfunction MeasurementForm(props) {\n    \n\n    return (\n        <Form onSubmit={event => {event.preventDefault(); props.handleSubmit(event)}}>\n        <Row>\n        <Col>\n        <Form.Group controlId=\"cityM\">\n            <Form.Label>Enter a city:</Form.Label>\n            <Form.Control size='lg' type=\"text\" placeholder=\"Enter city name\" />\n        </Form.Group>\n        </Col>\n        </Row>\n\n        <Row>\n        <Col>\n        <Form.Group controlId=\"coordinatesM\">\n            <Form.Label>Enter a coordinates:</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"Enter coordinates\" />\n        </Form.Group>\n        </Col>\n        <Col>\n        <Form.Group controlId=\"countryM\">\n            <Form.Label>Enter a country:</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"Enter country\" />\n        </Form.Group>\n        </Col>\n        </Row>\n\n        <Row>\n        <Col>\n        <Form.Group controlId=\"dateM\">\n            <Form.Label>Enter a date:</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"Enter date\" />\n        </Form.Group>\n        </Col>\n\n        <Col>\n        <Form.Group controlId=\"locationM\">\n            <Form.Label>Enter a location:</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"Enter location\" />\n        </Form.Group>\n        </Col>\n        </Row>\n\n        <Row>\n        <Col>\n        <Form.Group controlId=\"parameterM\">\n            <Form.Label>Enter a parameter:</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"Enter parameter\" />\n        </Form.Group>\n        </Col>\n\n        <Col>\n        <Form.Group controlId=\"unitM\">\n            <Form.Label>Enter a unit:</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"Enter unit\" />\n        </Form.Group>\n        </Col>\n        </Row>\n\n        <Row>\n        <Col>\n        <Form.Group controlId=\"valueM\">\n            <Form.Label>Enter a value:</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"Enter value\" />\n        </Form.Group>\n        </Col>\n        </Row>\n\n        <Row>\n        <Col>\n        <OverlayTrigger\n            placement=\"right\"\n            delay={{ show: 250, hide: 400 }}\n            overlay={renderTooltip}\n        >\n        <Button variant=\"primary\" type=\"submit\">\n        Submit\n        </Button>\n        </OverlayTrigger>\n        </Col>\n        </Row>\n\n        </Form>\n    )\n\n}\nexport default MeasurementForm;","import Form from 'react-bootstrap/Form'\nfunction SelectCityForm(props) {\n    return (\n<Form.Group controlId=\"exampleForm.ControlSelect1\">\n    <Form.Label>Select a city to view measurments</Form.Label>\n    <Form.Control as=\"select\" onChange={props.handleChange}>\n      {props.options}\n    </Form.Control>\n  </Form.Group>\n    )\n}\nexport default SelectCityForm;","import Button from 'react-bootstrap/Button';\nimport {Navbar, Nav, Form, FormControl} from 'react-bootstrap';\n\nfunction ExampleNavBar(props) {\n    return(\n    <>\n    <Navbar bg=\"primary\" variant=\"dark\">\n      <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Nav.Link href=\"#home\">Home</Nav.Link>\n        <Nav.Link href=\"#features\">Features</Nav.Link>\n        <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n      </Nav>\n      <Form inline>\n        <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n        <Button variant=\"outline-light\">Search</Button>\n      </Form>\n    </Navbar>\n    </>\n    )\n  }\nexport default ExampleNavBar;","import Toast from 'react-bootstrap/Toast';\nimport Button from 'react-bootstrap/Button';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport React, { useState } from \"react\";\n\n\nconst ExampleToast = ({ children }) => {\n    const [show, toggleShow] = useState(true);\n  \n    return (\n      <>\n        <Jumbotron>\n        {!show && <Button onClick={() => toggleShow(true)}>Show Toast</Button>}\n        <Toast show={show} onClose={() => toggleShow(false)}>\n          <Toast.Header>\n            <strong className=\"mr-auto\">Starting</strong>\n          </Toast.Header>\n          <Toast.Body>{children}</Toast.Body>\n        </Toast>\n        </Jumbotron>\n      </>\n    );\n  };\nexport default ExampleToast;","import Table from 'react-bootstrap/Table'\nfunction MeasurementTable(props) {\n    return (\n<Table striped bordered hover size=\"sm\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Parameter</th>\n      <th>Unit</th>\n      <th>Value</th>\n      <th>Date</th>\n    </tr>\n  </thead>\n  <tbody>\n  {props.rows}\n  </tbody>\n</Table>\n    )\n}\nexport default MeasurementTable;","import React, { Fragment, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Container from 'react-bootstrap/Container';\nimport Badge from 'react-bootstrap/Badge';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col'\nimport { useForm } from \"react-hook-form\";\nimport logo from './logo.svg';\n// import './App.css';\nimport MeasurementForm from './MeasurementForm';\nimport SelectCityForm from './SelectCityForm';\nimport ExampleNavBar from './ExampleNavBar';\nimport ExampleToast from './ExampleToast';\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MeasurementTable from './MeasurementTable';\n\nfunction App() {\n  const [data, setData] = useState( [\"loading\"] );\n  const [page, setPage] = useState(1);\n  /**\n   * Creates an effect to update list of cities\n   * from api call.\n   * Credit to Robin Wieruch for original code\n   * https://www.robinwieruch.de/react-hooks-fetch-data\n   */\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios('https://api.openaq.org/v1/cities?country=US');\n      // USE BELOW FOR PRESENTATION\n      // const result = await axios('https://api.openaq.org/v1/cities?country=US&limit=1000');\n      setData(result.data.results);\n      setCitySelected(result.data.results[0].name)\n      console.log(citySelected);\n      console.log(\"first city\" + result.data.results[0].name);\n    };\n\n    fetchData();\n  }, []);\n  \n  /**\n   * Creates an effect to update the city selected\n   * and fetch the measurements\n   */\n  const [citySelected, setCitySelected] = useState(\"\");\n  const [measurements, setMeasurements] = useState([]);\n  useEffect(() => {\n    const fetchCitySelected = async () => {\n      console.log(\"city chosen\" + citySelected);\n      var result = await axios('https://api.openaq.org/v1/measurements?country=US&city=' + citySelected);\n      console.log(result);\n      // var result2 = await axios('http://localhost:5050/api/v1/measurements/' + citySelected);\n\n      // var totalResults = result.data.results\n      // totalResults = totalResults.concat(result2.data);\n      setMeasurements(result.data.results);\n      console.log(measurements);\n      // console.log(\"Total Results\");\n      // console.log(totalResults);\n      // if(citySelected){\n        \n      // }\n      \n    };\n\n    fetchCitySelected();\n  }, [citySelected]);\n\n  /**\n   * Sends a PUT request after user enters city information\n   * and adds the resulting call back to the list of measurements\n   */\n  const [userMeasurement, setUserMeasurement] = useState({});\n  useEffect(() => {\n    const fetchUserMeasurement= async () => {\n      console.log(\"new measurement\" + JSON.stringify(userMeasurement));\n      const result = await axios({\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        url: 'http://localhost:5050/api/v1/measurements',\n        data : JSON.stringify(userMeasurement)\n      });\n      console.log(\"Fetching user stuff\" + (JSON.stringify(result.data)));\n      if(result.data.city === citySelected){\n        measurements.push(result.data);\n      }\n      \n      console.log(measurements);\n    };\n\n    fetchUserMeasurement();\n  }, [userMeasurement]);\n\n  /**\n   * Translates text fields into dict for uploading measurements.\n   * @param {*} event Submit button event\n   */\n  function submitUserMeasurement(event) {\n    console.log(\"event\");\n    console.log(event);\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    // event.preventDefault();\n    setUserMeasurement(\n      {\n        \"city\" : event.target[0].value,\n        \"coordinates\" : event.target[1].value,\n        \"country\" : event.target[2].value,\n        \"date\" : event.target[3].value,\n        \"location\" : event.target[4].value,\n        \"parameter\" : event.target[5].value,\n        \"unit\" : event.target[6].value,\n        \"value\" : event.target[7].value\n      }\n    )\n    console.log(userMeasurement);\n  }\n\n  return (\n    \n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Container className=\"mt-5\">\n        <h1 className=\"header\">OpenAQ App <Badge variant=\"secondary\">Now running with React-Bootstrap!</Badge></h1>\n      </Container>\n\n      <Container className=\"p-3\">\n      <ExampleToast className=\"p-4\">\n          <span role=\"img\" aria-label=\"tada\">\n            🎉\n          </span>\n           This app allows you to select a city and view air quality measurements from\n          a public api hosted at openaq.org. To begin, click on the select button below and choose a city!  \n          <span role=\"img\" aria-label=\"tada\">\n            🎉\n          </span>\n        </ExampleToast>\n      </Container>\n\n      <Container className=\"p-3\">\n      <Row>\n      <Col>\n      <SelectCityForm\n        options=\n        {data.map(city => (\n          <option value={city.name}>{city.name}</option>\n        ))}\n        handleChange = {event => setCitySelected(event.target.value)}\n      >\n      </SelectCityForm>\n      <MeasurementTable\n            rows = \n              {measurements.map(measurement => (\n                <tr>\n                  <td>{measurement.location}</td>\n                  <td>{measurement.parameter}</td>\n                  <td>{measurement.unit}</td>\n                  <td>{measurement.value}</td>\n                  <td>{(Date(measurement.date))}</td>\n                </tr>\n              ))}\n          >\n          </MeasurementTable>\n      </Col>\n      \n      <Col>\n      <MeasurementForm\n        handleSubmit= {event => submitUserMeasurement(event)}\n      >\n      </MeasurementForm>\n      </Col>\n      </Row>\n        </Container>\n\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}